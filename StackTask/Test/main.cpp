#include <iostream>   // Для ввода и вывода
#include <string>     // Для работы со строками
#include "MyStack.h"  // Подключаем наш заголовочный файл с классом Stack

using namespace std;       // Используем стандартное пространство имен
using namespace MyContainers; // Используем наше пространство имен MyContainers

// Функция для проверки, является ли скобочное выражение сбалансированным
bool isBalanced(const string& expression) {
    Stack s; // Создаем экземпляр нашего класса Stack (без шаблонов, хранит char)

    // Проходим по каждому символу в выражении
    for (char c : expression) {
        // Если символ - открывающая скобка ( (, [, { )
        if (c == '(' || c == '[' || c == '{') {
            s.push(c); // Помещаем открывающую скобку в стек
        }
        // Если символ - закрывающая скобка ( ), ], } )
        else if (c == ')' || c == ']' || c == '}') {
            // Если стек пуст, значит, встретили закрывающую скобку, для которой нет открывающей
            if (s.isEmpty()) {
                return false; // Выражение несбалансированно
            }

            char top = s.pop(); // Извлекаем верхний элемент из стека (последнюю открывающую скобку)

            // Проверяем, соответствует ли закрывающая скобка извлеченной открывающей скобке
            if ((c == ')' && top != '(') || // Проверяем соответствие круглой скобки
                (c == ']' && top != '[') || // Проверяем соответствие квадратной скобки
                (c == '}' && top != '{')) { // Проверяем соответствие фигурной скобки
                return false; // Скобки не соответствуют, выражение несбалансированно
            }
        }
        // Игнорируем все остальные символы (не скобки)
    }

    // Если стек пуст после обработки всего выражения, то все скобки сбалансированы
    return s.isEmpty();
}

int main() {
    string expression; // Строка для хранения введенного пользователем выражения

    cout << "Enter an expression: ";          // Выводим приглашение для ввода выражения
    getline(cin, expression);              // Считываем выражение целиком, включая пробелы

    if (isBalanced(expression)) {             // Вызываем функцию для проверки сбалансированности
        cout << "yes" << endl;              // Если сбалансировано, выводим "yes"
    } else {
        cout << "no" << endl;               // Если не сбалансировано, выводим "no"
    }

    return 0; // Возвращаем 0, указывая на успешное завершение программы
}
